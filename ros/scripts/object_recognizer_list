#!/usr/bin/env python

PACKAGE = 'mcr_object_recognition'
NODE = 'object_recognizer'
SERVICE = '~recognize_object'

import roslib
import rospy

import sys
from os.path import join
import numpy as np

# Import helper class for loading trained network
from mcr_object_recognition.trainer import ObjectClassifier

from mcr_perception_msgs.srv import RecognizeObjectResponse

import sensor_msgs.point_cloud2
import struct
import colorsys

import mcr_perception_msgs.msg
import std_msgs.msg



def load_classifier(classifier_name):
    cfg_folder = join(roslib.packages.get_pkg_dir(PACKAGE), 'common', 'config')
    return ObjectClassifier.load(join(cfg_folder, classifier_name, 'classifier.pkl'),
                                 join(cfg_folder, classifier_name, 'label_encoder.pkl'))

def get_feature_vector(pc):
    # Generator for x,y,z,rgb fields from pointcloud
    xyzrgb_gen = sensor_msgs.point_cloud2.read_points(pc, skip_nans=False, field_names=("esf"))

    # convert generator to list of lists then numpy array
    xyzrgb = [list(elem) for elem in list(xyzrgb_gen)]
    xyzrgb = np.array(np.ravel(xyzrgb))
    # print "feature vector shape" ,xyzrgb.shape
 
    return xyzrgb

if __name__ == '__main__':
    rospy.init_node(NODE)
    classifier = load_classifier(rospy.get_param("~classifier"))
    pub = rospy.Publisher("~results", mcr_perception_msgs.msg.RecognitionResultList, queue_size=1)

    def cluster_cb(data):
        if data.pointclouds:
            result_list = mcr_perception_msgs.msg.RecognitionResultList()
            result_list.header = data.header
            for cloud in data.pointclouds:
                result = mcr_perception_msgs.msg.RecognitionResult()
                features = get_feature_vector(cloud)
                label, probability = classifier.classify(features)
                result.label = label
                result.probability = probability
                result_list.results.append(result)
            pub.publish(result_list)


    sub = rospy.Subscriber("~cluster_list", mcr_perception_msgs.msg.PointCloud2List, cluster_cb);
    rospy.loginfo('Started recognition node.')
    rospy.spin()
